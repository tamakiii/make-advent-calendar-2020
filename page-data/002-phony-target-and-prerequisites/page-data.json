{"componentChunkName":"component---src-templates-markdown-js","path":"/002-phony-target-and-prerequisites","result":{"data":{"markdownRemark":{"html":"<h1>偽のターゲットと前提条件</h1>\n<p>タスクランナー的な make の用途には、本来のビルドツールとしての使い方の知識はほとんど必要ありません。\nですが、落とし穴を回避したり正しく使うためには正しい理解があるとよいです。\n「偽のターゲット（Phony Target）」と「前提条件（Prerequisites）」が分かると make の特性を生かしたルールが書けるはずです。</p>\n<h2>up to date</h2>\n<p>陥りやすい落とし穴のひとつが <code class=\"language-text\">up to date</code> です。\nこの Makefile は <code class=\"language-text\">make install</code> すると当然 <code class=\"language-text\">command</code> を出力します。</p>\n<div class=\"gatsby-highlight\" data-language=\"makefile\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-makefile line-numbers\"><code class=\"language-makefile\"><span class=\"token symbol\">install</span><span class=\"token punctuation\">:</span>\n\techo <span class=\"token string\">\"hello\"</span> > install</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span></span></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-shell line-numbers\"><code class=\"language-shell\">$ <span class=\"token function\">make</span> <span class=\"token function\">install</span>\n<span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"hello\"</span> <span class=\"token operator\">></span> <span class=\"token function\">install</span>\n$ <span class=\"token function\">ls</span> <span class=\"token function\">install</span>\n<span class=\"token function\">install</span>\n$ <span class=\"token function\">cat</span> <span class=\"token function\">install</span>\nhello</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>しかし、ここで再度 <code class=\"language-text\">make install</code> するとどうでしょうか。\n<code class=\"language-text\">make: &#39;install&#39; is up to date.</code> となってしまい、<code class=\"language-text\">command</code> が実行されません。これはどういうことでしょうか？</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-shell line-numbers\"><code class=\"language-shell\">$ <span class=\"token function\">make</span> <span class=\"token function\">install</span>\nmake: <span class=\"token string\">'install'</span> is up to date.</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span></span></pre></div>\n<p>make はターゲット名と同名のファイルが存在すると、既に成果物の生成が済んでいて再実行が不要と判断してコマンドを実行しません。\nそのため、例えば <code class=\"language-text\">test</code> ディレクトリがあるプロジェクトで <code class=\"language-text\">make test</code> をしたくても <code class=\"language-text\">up to date</code> になってしまう、といったことがあります。</p>\n<hr>\n<h2>PHONY:</h2>\n<p>こうした「成果物の生成に関わらないターゲット」を書くにはどうしたらいいでしょう？</p>\n<p>答えは、<code class=\"language-text\">PHONY:</code> を用いてターゲットを「偽のターゲット（<a href=\"https://www.gnu.org/software/make/manual/html_node/Phony-Targets.html\">Phony Target</a>）」にすることです。</p>\n<div class=\"gatsby-highlight\" data-language=\"makefile\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-makefile line-numbers\"><code class=\"language-makefile\"><span class=\"token builtin\">.PHONY</span><span class=\"token punctuation\">:</span> install\n\n<span class=\"token symbol\">install</span><span class=\"token punctuation\">:</span>\n\techo <span class=\"token string\">\"hello\"</span> > install</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span></span></pre></div>\n<p>こうすることでターゲットと同名のファイルの有無に関わらずコマンドが実行されます（※1）。</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-shell line-numbers\"><code class=\"language-shell\">$ <span class=\"token function\">make</span> <span class=\"token function\">install</span>\n<span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"hello\"</span> <span class=\"token operator\">></span> <span class=\"token function\">install</span>\n$ <span class=\"token function\">make</span> <span class=\"token function\">install</span>\n<span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"hello\"</span> <span class=\"token operator\">></span> <span class=\"token function\">install</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span></span></pre></div>\n<hr>\n<h2>前提条件</h2>\n<p>本来のビルドツールとしての使い方をする場合にも、同様に <code class=\"language-text\">PHONY:</code> を書くかというと、そうではありません。</p>\n<p>これは C言語のプログラムをビルドする Makefile の例です。\n<code class=\"language-text\">main.o: main.c</code> の <code class=\"language-text\">:</code> の右側 <code class=\"language-text\">main.c</code> が「必要条件（<a href=\"https://www.gnu.org/software/make/manual/html_node/Automatic-Prerequisites.html\">Prerequisites</a>）」です。</p>\n<div class=\"gatsby-highlight\" data-language=\"makefile\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-makefile line-numbers\"><code class=\"language-makefile\"><span class=\"token symbol\">main.o</span><span class=\"token punctuation\">:</span> main.c\n\tgcc -o main.o main.c</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span></span></pre></div>\n<p>このように必要条件が設定されている場合も、<code class=\"language-text\">main.o</code> が生成されると <code class=\"language-text\">up to date</code> になりますが、</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-shell line-numbers\"><code class=\"language-shell\">$ <span class=\"token function\">make</span> main.o\ngcc -o main.o main.c\n$ ./main.o\nhello, girls\n$ <span class=\"token function\">make</span> main.o\nmake: <span class=\"token string\">'main.o'</span> is up to date.</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>必要条件のタイムスタンプが更新されると make は「成果物の再生成が必要」と判断してコマンドを実行します。</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-shell line-numbers\"><code class=\"language-shell\">$ <span class=\"token function\">touch</span> main.c\n$ <span class=\"token function\">make</span> main.o\ngcc -o main.o main.c</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span></span></pre></div>\n<p>このように何らかの成果物を作る場合は、前提条件のタイムスタンプを考慮する挙動を活かし、\nそういった制御が不要であれば偽のターゲットとして定義する、というのがベーシックなタスクランナー的な Makefile の書き方です。</p>\n<!--\n※1. `.PHONY:` には複数のターゲットがスペース区切りで書けます。\n```makefile\n.PHONY: install test\n```\n\nまた、複数行書くとスペース区切りのリストに要素を追加する挙動になるためこうも書けます。\n```makefile\n.PHONY: install\n.PHONY: test\n```\n\nどこに書いてもいいのでターゲットごとにまとめることも出来ます。\n```makefile\n.PHONY: install\ninstall:\n\t...\n\n.PHONY: test\ntest:\n\t...\n```\n-->","excerpt":"偽のターゲットと前提条件 タスクランナー的な make の用途には、本来のビルドツールとしての使い方の知識はほとんど必要ありません。\nですが、落とし穴を回避したり正しく使うためには正しい理解があるとよいです。\n「偽のターゲット（Phony Target）」と「前提条件（Prerequisites）」が分かると mak…","frontmatter":{"date":"December 02, 2020","slug":"/002-phony-target-and-prerequisites","title":"偽のターゲットと前提条件"}}},"pageContext":{"slug":"/002-phony-target-and-prerequisites","nodes":[{"node":{"frontmatter":{"slug":"/001-makefile-in-2020","title":"2020年の Makefile"}}},{"node":{"frontmatter":{"slug":"/002-phony-target-and-prerequisites","title":"偽のターゲットと前提条件"}}},{"node":{"frontmatter":{"slug":"/003-variable","title":"変数"}}},{"node":{"frontmatter":{"slug":"/004-automatic-variable","title":"自動変数"}}},{"node":{"frontmatter":{"slug":"/005-c-and-f-option","title":"-C オプションと -f オプション"}}},{"node":{"frontmatter":{"slug":"/006-default-target","title":"デフォルトターゲット"}}},{"node":{"frontmatter":{"slug":"/007-exit-status","title":"終了ステータス"}}},{"node":{"frontmatter":{"slug":"/008-text-functions","title":"文字列の関数"}}},{"node":{"frontmatter":{"slug":"/009-functions-for-filenames","title":"ファイル名の関数"}}}]}},"staticQueryHashes":["3649515864","63159454"]}