{"componentChunkName":"component---src-templates-markdown-js","path":"/003-variable","result":{"data":{"markdownRemark":{"html":"<h1>変数</h1>\n<p>変数は make の特徴的な2つの側面に大きく関わる要素です。「O'Reilly GNU Make 第3版」3章の冒頭からの引用です。</p>\n<blockquote>\n<p>make がある意味で2つの言語を1つにしたものだと理解することは重要です。\n1つはターゲットを必須項目から成る依存関係グラフを表現します。 もう1つはテキストの置換を行うマクロ言語です。\n他のマクロ言語つまりCのプリプロセッサ、m4、TeX、マクロアセンブラについてはよくご存知かと思います。\nそれらのマクロ言語と同じように、make のマクロも長い文字列を短い単語で定義し、短い単語を使ってプログラムを書くことが出来ます。\nマクロプロセッサは短い単語を認識し、それを長い文字列に展開します。</p>\n</blockquote>\n<h2>簡単な変数</h2>\n<p>変数の定義にはいくつかパターンがありますが、簡単な例から見ていきましょう。\n変数 <code class=\"language-text\">MESSAGE</code> を <code class=\"language-text\">:=</code> 演算子で定義して、<code class=\"language-text\">$()</code> で展開します（※1）。</p>\n<div class=\"gatsby-highlight\" data-language=\"makefile\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-makefile line-numbers\"><code class=\"language-makefile\"><span class=\"token builtin\">.PHONY</span><span class=\"token punctuation\">:</span> hello\n\nMESSAGE <span class=\"token operator\">:=</span> hello\n\n<span class=\"token symbol\">hello</span><span class=\"token punctuation\">:</span>\n\techo <span class=\"token variable\">$</span><span class=\"token punctuation\">(</span>MESSAGE<span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>この Makefile は変数 <code class=\"language-text\">MESSAGE</code> を出力します。この変数は make の変数で、実行時には既に展開された形になっています。</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-shell line-numbers\"><code class=\"language-shell\">$ <span class=\"token function\">make</span> hello\n<span class=\"token builtin class-name\">echo</span> hello\nhello</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span></span></pre></div>\n<p>make の変数が便利なのは、実行時引数でこれを上書きできるところです。これによって Makefile に容易に拡張性を持たせられます。</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-shell line-numbers\"><code class=\"language-shell\">$ <span class=\"token function\">make</span> hello <span class=\"token assign-left variable\">MESSAGE</span><span class=\"token operator\">=</span>konnnichiwa\n<span class=\"token builtin class-name\">echo</span> konnnichiwa\nkonnnichiwa</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span></span></pre></div>\n<p>例えば、ある言語のバージョンを上げたいとき、2つのバイナリを用意しておいて、それぞれで同じターゲットを実行する、といった使い方が出来ます。</p>\n<div class=\"gatsby-highlight\" data-language=\"makefile\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-makefile line-numbers\"><code class=\"language-makefile\"><span class=\"token builtin\">.PHONY</span><span class=\"token punctuation\">:</span> py\n\nPYTHON <span class=\"token operator\">=</span> python\n\n<span class=\"token symbol\">py</span><span class=\"token punctuation\">:</span>\n\t<span class=\"token variable\">$</span><span class=\"token punctuation\">(</span>PYTHON<span class=\"token punctuation\">)</span> main.py</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-shell line-numbers\"><code class=\"language-shell\">$ <span class=\"token function\">make</span> py\npython main.py\npsyche\n$ <span class=\"token function\">make</span> py <span class=\"token assign-left variable\">PYTHON</span><span class=\"token operator\">=</span>python3\npython3 main.py\n  File <span class=\"token string\">\"main.py\"</span>, line <span class=\"token number\">1</span>\n    print <span class=\"token string\">\"psyche\"</span>\n                 ^\nSyntaxError: Missing parentheses <span class=\"token keyword\">in</span> call to <span class=\"token string\">'print'</span><span class=\"token builtin class-name\">.</span> Did you mean print<span class=\"token punctuation\">(</span><span class=\"token string\">\"psyche\"</span><span class=\"token punctuation\">)</span>?\nmake: *** <span class=\"token punctuation\">[</span>Makefile:15: py<span class=\"token punctuation\">]</span> Error <span class=\"token number\">1</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2>変数名の大文字小文字</h2>\n<p>make の変数は case-sensitive、つまり <code class=\"language-text\">FOO</code> <code class=\"language-text\">Foo</code> <code class=\"language-text\">foo</code> はそれぞれ別の変数として扱われます。</p>\n<p>公式ドキュメントには「利用者がコマンドオプションで上書きするパラメタ的な変数や、暗黙のルール（<a href=\"https://www.gnu.org/software/make/manual/html_node/Implicit-Rules.html\">Implicit Rule</a>）を制御する変数には、大文字を使うことを推奨する」とあります。\nまた、内部的な変数には小文字を使うことを推奨しています。</p>\n<blockquote>\n<p>It is traditional to use upper case letters in variable names,\nbut we recommend using lower case letters for variable names that serve internal purposes in the makefile,\nand reserving upper case for parameters that control implicit rules or for parameters that the user should override with command options</p>\n</blockquote>\n<p><a href=\"https://www.gnu.org/software/make/manual/html_node/Using-Variables.html\">https://www.gnu.org/software/make/manual/html_node/Using-Variables.html</a></p>\n<h2>リスト</h2>\n<p>make は本来の用途で多くのファイルを扱うため、リストを表現する手段を持っています。\nリストはスペース区切りの文字列です。</p>\n<p>リストは様々な用途に使えますが、一例としてターゲット名に使えます。\nこの例では、非リストの <code class=\"language-text\">greeting</code> とリストの <code class=\"language-text\">greetings</code> をターゲットに指定し、結果として変数に含まれている値がターゲットとして扱われています。</p>\n<div class=\"gatsby-highlight\" data-language=\"makefile\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-makefile line-numbers\"><code class=\"language-makefile\">greeting <span class=\"token operator\">:=</span> holla\ngreetings <span class=\"token operator\">:=</span> ciao mhoro talofa\n\n<span class=\"token symbol\"><span class=\"token variable\">$</span>(greeting)</span><span class=\"token punctuation\">:</span>\n\techo <span class=\"token string\">\"greeting\"</span>\n\n<span class=\"token symbol\"><span class=\"token variable\">$</span>(greetings)</span><span class=\"token punctuation\">:</span>\n\techo <span class=\"token string\">\"greetings\"</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-shell line-numbers\"><code class=\"language-shell\">$ <span class=\"token function\">make</span> holla\n<span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"greeting\"</span>\ngreeting\n$ <span class=\"token function\">make</span> ciao\n<span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"greetings\"</span>\ngreetings\n$ <span class=\"token function\">make</span> mhoro talofa\n<span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"greetings\"</span>\ngreetings\n<span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"greetings\"</span>\ngreetings</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2>変数の定義方法</h2>\n<p>make には変数の定義方法が複数あります。</p>\n<div class=\"gatsby-highlight\" data-language=\"makefile\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-makefile line-numbers\"><code class=\"language-makefile\">immediate   <span class=\"token operator\">:=</span> value\nlazy         <span class=\"token operator\">=</span> value\nconditional <span class=\"token operator\">?=</span> value\nappend      <span class=\"token operator\">+=</span> value\nappend      <span class=\"token operator\">+=</span> value</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p><code class=\"language-text\">+=</code> はリストに要素を追加する演算子ですが、残り3つは「いつ評価されるか」に違いがあります。</p>\n<p><code class=\"language-text\">:=</code> で表されるものは「単純展開変数（Simply Expanded Variable）」、<code class=\"language-text\">=</code> で表されるものは「再帰展開変数（Recursively Expanded Variable）」（または「遅延評価変数（Lazy Expanded Variable）」）、<code class=\"language-text\">?=</code> で表されるものは「条件付き代入変数（Conditional Variable）」と呼ばれます。</p>\n<p>簡潔に言えば、<code class=\"language-text\">:=</code> は一度だけ評価され、<code class=\"language-text\">=</code> は変数展開する毎に評価される可能性があり、<code class=\"language-text\">?=</code> は値を持たないときだけ評価されます。</p>\n<p>問題になりやすいのが <code class=\"language-text\">=</code> で、ターゲットをまたがった際など、必要と判断されると再評価されて値が変わってしまうことがあります。</p>\n<div class=\"gatsby-highlight\" data-language=\"makefile\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-makefile line-numbers\"><code class=\"language-makefile\"><span class=\"token builtin\">.PHONY</span><span class=\"token punctuation\">:</span> test a sleep b\n\nimmediate <span class=\"token operator\">:=</span> <span class=\"token variable\">$</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">shell</span> date +%s<span class=\"token punctuation\">)</span>\nlazy       <span class=\"token operator\">=</span> <span class=\"token variable\">$</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">shell</span> date +%s<span class=\"token punctuation\">)</span>\n\n<span class=\"token symbol\">test</span><span class=\"token punctuation\">:</span> a sleep b\n\n<span class=\"token symbol\">a</span><span class=\"token punctuation\">:</span>\n\techo <span class=\"token variable\">$</span><span class=\"token punctuation\">(</span>immediate<span class=\"token punctuation\">)</span> <span class=\"token comment\"># immediate</span>\n\techo <span class=\"token variable\">$</span><span class=\"token punctuation\">(</span>lazy<span class=\"token punctuation\">)</span> <span class=\"token comment\"># lazy</span>\n\n<span class=\"token symbol\">sleep</span><span class=\"token punctuation\">:</span>\n\tsleep 3\n\n<span class=\"token symbol\">b</span><span class=\"token punctuation\">:</span>\n\techo <span class=\"token variable\">$</span><span class=\"token punctuation\">(</span>immediate<span class=\"token punctuation\">)</span> <span class=\"token comment\"># immediate</span>\n\techo <span class=\"token variable\">$</span><span class=\"token punctuation\">(</span>lazy<span class=\"token punctuation\">)</span> <span class=\"token comment\"># lazy</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>このように immediate が変わらないのに対して、lazy が再評価されます。</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-shell line-numbers\"><code class=\"language-shell\">$ <span class=\"token function\">make</span> <span class=\"token builtin class-name\">test</span>\n<span class=\"token builtin class-name\">echo</span> <span class=\"token number\">1607153140</span> <span class=\"token comment\"># immediate</span>\n<span class=\"token number\">1607153140</span>\n<span class=\"token builtin class-name\">echo</span> <span class=\"token number\">1607153140</span> <span class=\"token comment\"># lazy</span>\n<span class=\"token number\">1607153140</span>\n<span class=\"token function\">sleep</span> <span class=\"token number\">3</span>\n<span class=\"token builtin class-name\">echo</span> <span class=\"token number\">1607153140</span> <span class=\"token comment\"># immediate</span>\n<span class=\"token number\">1607153140</span>\n<span class=\"token builtin class-name\">echo</span> <span class=\"token number\">1607153143</span> <span class=\"token comment\"># lazy</span>\n<span class=\"token number\">1607153143</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>特別な意図がない限り <code class=\"language-text\">:=</code> （単純展開変数）を使うようにすればよいでしょう。</p>\n<h2>リンク</h2>\n<ul>\n<li><a href=\"https://nekonenene.hatenablog.com/entry/2019/02/11/070021\">https://nekonenene.hatenablog.com/entry/2019/02/11/070021</a></li>\n<li><a href=\"https://www.gnu.org/software/make/manual/html_node/Flavors.html\">https://www.gnu.org/software/make/manual/html_node/Flavors.html</a></li>\n<li><a href=\"https://qiita.com/kojiohta/items/54b1a9f7d482c35dc4fa\">https://qiita.com/kojiohta/items/54b1a9f7d482c35dc4fa</a></li>\n</ul>\n<p>※1. <code class=\"language-text\">$()</code> の他にも <code class=\"language-text\">${}</code> でも展開できますし、特殊なパターンとして変数名が一文字の場合は <code class=\"language-text\">$</code> で展開出来ます。複数の書き方が混在するのは好ましくないので、<code class=\"language-text\">$()</code> に統一するのがよいのではないでしょうか。</p>","excerpt":"変数 変数は make の特徴的な2つの側面に大きく関わる要素です。「O'Reilly GNU Make 第3版」3章の冒頭からの引用です。 make がある意味で2つの言語を1つにしたものだと理解することは重要です。\n1つはターゲットを必須項目から成る依存関係グラフを表現します。 もう1つはテキストの置換を行うマク…","frontmatter":{"date":"December 03, 2020","slug":"/003-variable","title":"変数"}}},"pageContext":{"slug":"/003-variable","nodes":[{"node":{"frontmatter":{"slug":"/001-makefile-in-2020","title":"2020年の Makefile"}}},{"node":{"frontmatter":{"slug":"/002-phony-target-and-prerequisites","title":"偽のターゲットと前提条件"}}},{"node":{"frontmatter":{"slug":"/003-variable","title":"変数"}}},{"node":{"frontmatter":{"slug":"/004-automatic-variable","title":"自動変数"}}},{"node":{"frontmatter":{"slug":"/005-c-and-f-option","title":"-C オプションと -f オプション"}}}]}},"staticQueryHashes":["3649515864","63159454"]}