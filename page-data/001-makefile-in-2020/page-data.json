{"componentChunkName":"component---src-templates-markdown-js","path":"/001-makefile-in-2020","result":{"data":{"markdownRemark":{"html":"<h1>2020年の Makefile</h1>\n<p>開発環境の立ち上げやテスト、フォーマットといったコマンド処理を自動化したいとき、どういった方法を考えますか？\n多くの方がシェルスクリプトを挙げると思います。プロジェクトによっては <code class=\"language-text\">node run</code> とかかもしれません。</p>\n<p>ただ、複数種のプロジェクトに携わる場合には極力その方法は似通っていた方が何かと楽ですし、\nちょっとした環境差分を埋めるためにオプションを足したいのだけど、えーっと引数のパースってどうするんだっけ…なんて覚えはありませんか？</p>\n<p>そこでお勧めしたいのが <code class=\"language-text\">make</code> です。</p>\n<h2>make の歴史</h2>\n<p><code class=\"language-text\">make</code> は元々は C言語などのソースコードをビルドするために生まれたツールです。\nですが、最近では半ばタスクランナー的な用途（※1）に <code class=\"language-text\">make</code> を用いることがあります。</p>\n<p>年を追うごとに本来の用途としての出番が減る（※2）一方で、2012年ごろから私の周囲ではタスクランナー的に使う人がちらほら見られはじめ、\nGo言語圏で流行ったこともあり2015年ごろから世間的にも認知されるようになった気がします。</p>\n<h2>Makefile とは</h2>\n<p>タスクランナー的な <code class=\"language-text\">make</code> の用途には、本来のビルドツールとしての使い方の知識はほとんど必要ありません。\n<code class=\"language-text\">make</code> \bが実行する内容を指定する <code class=\"language-text\">Makefile</code> は、このような「ルール（<a href=\"https://www.gnu.org/software/make/manual/html_node/Rules.html\">Rule</a>）」で構成されます。</p>\n<div class=\"gatsby-highlight\" data-language=\"makefile\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-makefile line-numbers\"><code class=\"language-makefile\"><span class=\"token symbol\">target ... </span><span class=\"token punctuation\">:</span> prerequisites ...\n\tcommand\n\t...</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span></span></pre></div>\n<p><code class=\"language-text\">target</code> は通常はファイルの名称ですが、<code class=\"language-text\">install</code> のように動作を表すこともあります。適当な名前をつけられるわけです（※3）。</p>\n<p><code class=\"language-text\">prerequisites</code> はターゲットを作るときの入力として用いられる「必要条件（<a href=\"https://www.gnu.org/software/make/manual/html_node/Automatic-Prerequisites.html\">Prerequisites</a>）」です。今回は使わないので一旦忘れましょう。</p>\n<p><code class=\"language-text\">command</code> は <code class=\"language-text\">echo ...</code> や <code class=\"language-text\">cat ... | sed ...</code> などのコマンドです（※4）。</p>\n<hr>\n<p><code class=\"language-text\">target</code> と <code class=\"language-text\">command</code> を持つ簡単な <code class=\"language-text\">Makefile</code> を書いてみます。</p>\n<div class=\"gatsby-highlight\" data-language=\"makefile\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-makefile line-numbers\"><code class=\"language-makefile\"><span class=\"token symbol\">hello</span><span class=\"token punctuation\">:</span>\n\techo <span class=\"token string\">\"hello, weird\"</span>\n\tpwd</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span></span></pre></div>\n<p>この <code class=\"language-text\">Makefile</code> があるディレクトリで <code class=\"language-text\">make hello</code> を実行すると、<code class=\"language-text\">command</code> の内容とそれらの実行結果が出力されます。</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-shell line-numbers\"><code class=\"language-shell\">$ <span class=\"token function\">ls</span> Makefile\nMakefile</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span></span></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-shell line-numbers\"><code class=\"language-shell\">$ <span class=\"token function\">make</span> hello\n<span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"hello, weird\"</span>\nhello, weird\n<span class=\"token builtin class-name\">pwd</span>\n/Users/tamakiii/Sites/voyagegroup/make-advent-calendar-2020/example/001</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p><code class=\"language-text\">make</code> は <code class=\"language-text\">command</code> に特別な指定をしない限り <code class=\"language-text\">command</code> も出力します。これは不便なように思われるかもしれませんが、\n<code class=\"language-text\">Makefile</code> の記述量が増えた際、何を実行しているのかが一目瞭然で、その利点の方が遥かに勝ります。</p>\n<p>ルールの書き方がわかりました。\nあとは自動化したい処理を思うように書くだけです。例えばこんな感じです。</p>\n<ul>\n<li>Go言語のプログラムを <code class=\"language-text\">build</code> して <code class=\"language-text\">test</code> する</li>\n<li><code class=\"language-text\">npm</code> パッケージを <code class=\"language-text\">install</code> して <code class=\"language-text\">clean</code> する</li>\n<li>開発環境用の設定ファイルを <code class=\"language-text\">setup</code> する</li>\n<li>プロビジョニングツールとして使う（<code class=\"language-text\">apt-get install -y ...</code>）</li>\n</ul>\n<p>こういった手順を <code class=\"language-text\">Makefile</code> として書いてやれば、他のマシン上でも同様の手順が再現できます。\n開発環境上で実行している多少複雑なテスト手順を、CI で同じように実行する、などなど。便利ですね。</p>\n<h2>実装の種別とインストール</h2>\n<p><code class=\"language-text\">make</code> は歴史が長いだけあっていくつか実装が存在します。主な実装に「<a href=\"https://www.gnu.org/software/make/\">GNU make</a>」「<a href=\"https://www.freebsd.org/doc/en/books/developers-handbook/tools-make.html\">BSD make</a>」「<a href=\"https://www.linux.co.cr/unix/review/1983/0806-a.html#:~:text=4.1%20%20Make\">System V make</a>」があります。\nちなみに <a href=\"https://cmake.org/\">CMake</a> は Java と JavaScript くらい別物です。</p>\n<p>それぞれ細かな差があり、同じ <code class=\"language-text\">Makefile</code> でも同様に動かないことがほとんどです。入手のしやすさなどから <code class=\"language-text\">GNU make</code> が多く使われていて、BSD系[?] の macOS ですら <code class=\"language-text\">GNU make</code> が標準でインストールされていることから、\nタスクランナー的な用途の文脈では <code class=\"language-text\">make</code> は <code class=\"language-text\">GNU make</code> のことを指します。</p>\n<p>macOS では標準でインストールされているものを使うか Home brew 経由で、Linux では各ディストリビューションのパッケージマネージャ経由で、Windows では <a href=\"http://gnuwin32.sourceforge.net/packages/make.htm\">Make for Windows</a> や <a href=\"http://www.mingw.org/wiki/InstallationHOWTOforMinGW\">MinGW</a> からインストールできます。ただ、Windows は現代では WSL2 の環境を整えた方がよさそうです。</p>\n<hr>\n<h2>リンク</h2>\n<ul>\n<li><a href=\"https://github.com/voyagegroup/make-advent-calendar-2020/blob/master/example/001\">https://github.com/voyagegroup/make-advent-calendar-2020/blob/master/example/001</a></li>\n<li><a href=\"https://sohlich.github.io/post/go_makefile/\">Golang: Don’t afraid of makefiles - Radomir Sohlich</a></li>\n</ul>\n<p>※1. Phony Target を多様したり、プログラムをビルドする以外の目的で <code class=\"language-text\">Makefile</code> を書くといった用途。「ベターシェルスクリプト」「実行可能なドキュメント」「読める実行ファイル」「メタ的な Makefile」などの形容がありますが未だになんと呼んだらいいのか個人的に決めかねています。なんて呼んだらいいんですかね</p>\n<p>※2. <a href=\"https://trends.google.co.jp/trends/explore?date=all&#x26;q=makefile\">Google Trend 調べ</a>。<code class=\"language-text\">make</code> は今でもさまざまなオープンソースプロジェクトで使われていて、<code class=\"language-text\">Autotools</code> や <code class=\"language-text\">Automake</code> などの知識があると探索がはかどります</p>\n<p>※3. このようなターゲットは 「偽のターゲット（<a href=\"https://www.gnu.org/software/make/manual/html_node/Phony-Targets.html\">Phony Target</a>）」と呼ばれ、<code class=\"language-text\">.PHONY:</code> で指定されますが、ここでは一旦忘れましょう。</p>\n<p>※4. 通常、<code class=\"language-text\">/bin/sh</code> がデフォルトシェルとして設定されているはずです。</p>","excerpt":"2020年の Makefile 開発環境の立ち上げやテスト、フォーマットといったコマンド処理を自動化したいとき、どういった方法を考えますか？\n多くの方がシェルスクリプトを挙げると思います。プロジェクトによっては  とかかもしれません。 ただ、複数種のプロジェクトに携わる場合には極力その方法は似通っていた方が何かと楽で…","frontmatter":{"date":"December 01, 2020","slug":"/001-makefile-in-2020","title":"2020年の Makefile"}}},"pageContext":{"slug":"/001-makefile-in-2020","nodes":[{"node":{"frontmatter":{"slug":"/001-makefile-in-2020","title":"2020年の Makefile"}}},{"node":{"frontmatter":{"slug":"/002-phony-target-and-prerequisites","title":"偽のターゲットと前提条件"}}},{"node":{"frontmatter":{"slug":"/003-variable","title":"変数"}}},{"node":{"frontmatter":{"slug":"/004-automatic-variable","title":"自動変数"}}},{"node":{"frontmatter":{"slug":"/005-c-and-f-option","title":"-C オプションと -f オプション"}}},{"node":{"frontmatter":{"slug":"/006-default-target","title":"デフォルトターゲット"}}},{"node":{"frontmatter":{"slug":"/007-exit-status","title":"終了ステータス"}}},{"node":{"frontmatter":{"slug":"/008-text-functions","title":"文字列の関数"}}},{"node":{"frontmatter":{"slug":"/009-functions-for-filenames","title":"ファイル名の関数"}}},{"node":{"frontmatter":{"slug":"/010-functions-for-lists","title":"リストの関数"}}},{"node":{"frontmatter":{"slug":"/011-shell-function","title":"shell 関数"}}}]}},"staticQueryHashes":["3649515864","63159454"]}